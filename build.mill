package build
import mill._, javalib._, publish._ 
import scalalib.SbtModule
import javalib.Assembly._

import $ivy.`de.tototec::de.tobiasroeser.mill.vcs.version::0.4.1`
import de.tobiasroeser.mill.vcs.version.VcsVersion

import $ivy.`com.lihaoyi::mill-contrib-buildinfo:`
import mill.contrib.buildinfo.BuildInfo

/**
  * General Notes:
  *   - We add explicit names to the shaded dependencies so that when they get imported
  *     an IDE the dependency name is not just "out.jar", which would be the default name
  *     generated by Mill for the assembly. Similarly, we add the shaded dependencies as
  *     unmamaged dependencies so that IDE's don't try to build them but just use them.
  */


/**
 * Shades the asm-commons and asm-tree dependencies that are excluded in ByteBuddy's own
 * build but that we need for our own implementations of Bridges and Mixins. The shaded
 * location must be same as used in ByteBuddy so that classes can interop with each other.
 */
object dependencies extends JavaModule {

  def ivyDeps = Agg(
      ivy"org.ow2.asm:asm-commons:9.7.1".exclude("*" -> "*"),
      ivy"org.ow2.asm:asm-tree:9.7.1".exclude("*" -> "*")
    )

  def assemblyRules = Seq(
    Rule.Exclude("module-info.class"),
    Rule.Relocate("org.objectweb.**", "net.bytebuddy.jar.@1")
  )

  def kanelaShadedDependencies = Task {
    val shadedDependencies = Task.dest / "kanela-shaded-dependencies.jar"
    os.copy(assembly().path, shadedDependencies)
    PathRef(shadedDependencies)
  }
}

/**
 * The actual agent build. We are shading everything inside so that Kanela can be added as
 * a javaagent without any additional work in the classpath.
 */
object agent extends MavenModule with PublishModule with BuildInfo {
  def artifactName: T[String] = "kanela-agent"

  def publishVersion: T[String] = VcsVersion.vcsState().format()

  def pomSettings = PomSettings(
    description = "The Kamon Instrumentation Agent",
    organization = "io.kamon",
    url = "https://github.com/kamon-io/kanela",
    licenses = Seq(License.MIT),
    versionControl = VersionControl.github("kamon-io", "kanela"),
    developers = Seq(
      Developer("Ivan", "Topolnjak", "https://github.com/ivantopo"),
      Developer("Diego", "Parra", "https://github.com/dpsoft")
        )
  )

  val buildInfoPackageName = "kanela.agent.util"
  val buildInfoStaticCompiled = true
  def buildInfoMembers = Seq(
    BuildInfo.Value("version", publishVersion()),
  )

  def unmanagedClasspath = Agg(dependencies.kanelaShadedDependencies())

  def javacOptions = Seq("-source", "1.8", "-target", "1.8")

  def compileIvyDeps = Agg(
      ivy"com.typesafe:config:1.4.3",
      ivy"org.tinylog:tinylog:1.3.6",
      ivy"net.bytebuddy:byte-buddy:1.17.0",
      ivy"net.bytebuddy:byte-buddy-agent:1.17.0",
    )

  def localClasspath = Task {
    super.localClasspath() ++ super.resolvedIvyDeps()
  }

  def assemblyRules = Seq(
      Rule.Relocate("org.tinylog.**" , "kanela.agent.libs.@0"),
      Rule.Relocate("com.typesafe.**" , "kanela.agent.libs.@0"),
      Rule.Relocate("net.bytebuddy.**" , "kanela.agent.libs.@0")
    )

  def manifest = super.manifest().add(
      ("Agent-Class" -> "kanela.agent.Kanela"),
      ("Premain-Class" -> "kanela.agent.Kanela"),
      ("Main-Class" -> "kanela.agent.attacher.Attacher"),
      ("Can-Redefine-Classes" -> "true"),
      ("Can-Retransform-Classes" -> "true"),
      ("Can-Set-Native-Method-Prefix" -> "true")
    )

  def jar = Task {
    assembly()
  }

  def kanelaShadedJar = Task {
    val kanelaJar = Task.dest / "kanela-agent.jar"
    os.copy(assembly().path, kanelaJar)
    PathRef(kanelaJar)
  }
}

/**
  * Tests are in a separate module because Mill doesn't allow for a Java module to
  * have Scala in their tests, or at least not in any relatively simple way that
  * I (@ivantopo) could find. Its a bit silly to run `mill tests.test.test` but it
  * works!
  */
object tests extends SbtModule {
  def scalaVersion = "3.3.5"
  def unmanagedClasspath = Agg(agent.kanelaShadedJar())

  object test extends SbtTests with TestModule.Munit {
    def forkArgs = Seq("-javaagent:" + agent.kanelaShadedJar().path)
    def ivyDeps = Agg(ivy"org.scalameta::munit:1.0.4")
  }
}

