/*
 * =========================================================================================
 * Copyright Â© 2013-2018 the kamon project <http://kamon.io/>
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
 * except in compliance with the License. You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the
 * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific language governing permissions
 * and limitations under the License.
 * =========================================================================================
 */


plugins {
    id 'java'
    id 'application'
    id 'scala'
    id 'com.github.maiflai.scalatest' version '0.31'
}

mainClassName = 'app.kanela.JavaMainWithAgent'

dependencies {
    implementation "org.scala-lang:scala-library:${scala_version}"
    implementation 'org.slf4j:slf4j-api:1.7.25'
    implementation 'ch.qos.logback:logback-core:1.2.3'
    implementation 'ch.qos.logback:logback-classic:1.2.3'

    implementation "io.kamon:kanela-agent:${agent_version}"

    provided(kamon_agent_dep)

    testImplementation 'org.mockito:mockito-core:2.28.2'
    testImplementation 'org.scalatest:scalatest_2.12:3.0.8'
    testRuntimeOnly 'org.pegdown:pegdown:1.6.0'
}

def KamonAgentTestRunning = null

def singleTests = [
        [taskName: 'bridge-spec', clazz: 'app.kanela.specs.BridgeInstrumentationSpec',
         jvmArgs: ['-Dkanela.modules.test-module.instrumentations.0=app.kanela.instrumentation.BridgeInstrumentation']],
        [taskName: 'bootstrap-injection-spec', clazz: 'BootstrapInstrumentationSpec', attachKamonAgent: false,
         jvmArgs: ['-Dkanela.modules.test-module.instrumentations.0=app.kanela.instrumentation.BootstrapInstrumentation',
                   '-Dkanela.modules.test-module.disable-class-format-changes=false', '-Dkanela.modules.test-module.bootstrap-injection.enabled=true']],
        [taskName: 'multi-mixins-spec', clazz: 'app.kanela.specs.MultiMixinsInstrumentationSpec',
         jvmArgs: ['-Dkanela.modules.test-module.instrumentations.0=app.kanela.instrumentation.MultiMixinsInstrumentation']],
        [taskName: 'simple-instrumentation-spec', clazz: 'app.kanela.specs.SimpleInstrumentationSpec',
         jvmArgs: ['-Dkanela.modules.test-module.instrumentations.0=app.kanela.instrumentation.SimpleInstrumentation']],
        [taskName: 'attach-in-runtime-spec', clazz: 'app.kanela.specs.AttachInRuntimeSpec', attachKamonAgent: false,
         jvmArgs: ['-Dkanela.modules.test-module.instrumentations.0=app.kanela.instrumentation.StoppableInstrumentation', '-Dkanela.show-banner=false']],
        [taskName: 'stoppable-instrumentation-spec', clazz: 'app.kanela.specs.StoppableInstrumentationSpec', attachKamonAgent: false,
         jvmArgs: ['-Dkanela.modules.test-module.instrumentations.0=app.kanela.instrumentation.StoppableInstrumentation',
                   '-Dkanela.modules.test-module.stoppable=true', '-Dkanela.show-banner=false']],
]

run.doFirst {
    jvmArgs "-javaagent:${configurations.agent.singleFile}"
    logger.debug "Running with: allJvmArgs=${allJvmArgs}"
}

test.doFirst {
    if (KamonAgentTestRunning) {
        logger.lifecycle "Running ${KamonAgentTestRunning.taskName} test"
        test.filter.includeTestsMatching KamonAgentTestRunning.clazz
        def shouldAttachAgent = (KamonAgentTestRunning?.attachKamonAgent != null) ? KamonAgentTestRunning?.attachKamonAgent : true
        if (shouldAttachAgent) {
            jvmArgs "-javaagent:${configurations.agent.singleFile}"
        }
        jvmArgs KamonAgentTestRunning?.jvmArgs ?: []
    } else {
        logger.lifecycle "Running common tests"
        singleTests.each {
            def string = "!${it.clazz}"
            logger.debug "Excluding: ${string}"
            test.filter.includeTestsMatching string
        }
    }
    forkEvery = 1
    maxParallelForks = 5
    logger.debug "Running test with: forkEvery=${forkEvery}, maxParallelForks=${maxParallelForks}, allJvmArgs=${allJvmArgs}"
}

singleTests.each {
    def taskName = "${it.taskName}"
    task "${it.taskName}" {
        doFirst {
            logger.lifecycle "${taskName} running..."
            test.outputs.upToDateWhen { false }
        }
        finalizedBy(test)
        outputs.upToDateWhen { false }
    }
}

task allKamonTests {
    singleTests.each { allKamonTests.dependsOn "${it.taskName}" }
}

gradle.taskGraph.whenReady { taskGraph ->
    def result = singleTests.find { taskGraph.hasTask(":agent-test:${it.taskName}") }
    KamonAgentTestRunning = result
}

test.reports.html.required = false

